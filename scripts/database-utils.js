const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// C√°c h√†m ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu ƒë∆∞·ª£c g·ªôp chung
async function checkDatabase() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu...');
    
    const users = await prisma.user.findMany();
    console.log(`üë• T·ªïng s·ªë ng∆∞·ªùi d√πng: ${users.length}`);
    console.log(`üë®‚Äç‚öïÔ∏è B√°c sƒ©: ${users.filter(u => u.role === 'DOCTOR').length}`);
    console.log(`ü§í B·ªánh nh√¢n: ${users.filter(u => u.role === 'PATIENT').length}`);
    console.log(`üë®‚Äçüíº Qu·∫£n tr·ªã vi√™n: ${users.filter(u => u.role === 'ADMIN').length}`);
    
    const doctors = await prisma.doctor.findMany();
    console.log(`ü©∫ H·ªì s∆° b√°c sƒ©: ${doctors.length}`);
    
    const patients = await prisma.patient.findMany();
    console.log(`üìã H·ªì s∆° b·ªánh nh√¢n: ${patients.length}`);
    
    const appointments = await prisma.appointment.count();
    console.log(`üìÖ L·ªãch h·∫πn: ${appointments}`);
    
    const medicines = await prisma.medicine.count();
    console.log(`üíä Thu·ªëc: ${medicines}`);
    
    console.log('\nüìß Email ng∆∞·ªùi d√πng m·∫´u:');
    users.slice(0, 5).forEach(user => {
      console.log(`- ${user.email} (${user.role})`);
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

async function debugUsers() {
  try {
    console.log('üîç ƒêang debug m·ªëi quan h·ªá ng∆∞·ªùi d√πng...');
    
    // Ki·ªÉm tra b·ªánh nh√¢n v·ªõi m·ªëi quan h·ªá User c·ªßa h·ªç
    const patients = await prisma.patient.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            role: true
          }
        }
      }
    });
    
    console.log('\nü§í B·ªánh nh√¢n v√† h·ªì s∆° User c·ªßa h·ªç:');
    patients.forEach(patient => {
      console.log(`- ID B·ªánh nh√¢n: ${patient.id} | ID User: ${patient.userId} | Email: ${patient.user.email}`);
    });
    
    // Ki·ªÉm tra b√°c sƒ© v·ªõi m·ªëi quan h·ªá User c·ªßa h·ªç
    const doctors = await prisma.doctor.findMany({
      include: {
        user: {
          select: {
            id: true,
            email: true,
            role: true
          }
        }
      }
    });
    
    console.log('\nüë®‚Äç‚öïÔ∏è B√°c sƒ© v√† h·ªì s∆° User c·ªßa h·ªç:');
    doctors.forEach(doctor => {
      console.log(`- ID B√°c sƒ©: ${doctor.id} | ID User: ${doctor.userId} | Email: ${doctor.user.email}`);
    });
    
    // Ki·ªÉm tra c√°c m·ªëi quan h·ªá b·ªã thi·∫øu
    const patientUsers = await prisma.user.findMany({
      where: { role: 'PATIENT' },
      include: { patient: true }
    });
    
    const doctorUsers = await prisma.user.findMany({
      where: { role: 'DOCTOR' },
      include: { doctor: true }
    });
    
    console.log('\n‚ö†Ô∏è  M·ªëi quan h·ªá b·ªã thi·∫øu:');
    patientUsers.forEach(user => {
      if (!user.patient) {
        console.log(`- Thi·∫øu h·ªì s∆° B·ªánh nh√¢n cho user: ${user.email}`);
      }
    });
    
    doctorUsers.forEach(user => {
      if (!user.doctor) {
        console.log(`- Thi·∫øu h·ªì s∆° B√°c sƒ© cho user: ${user.email}`);
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

async function finalDatabaseCheck() {
  try {
    console.log('üèÅ Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu cu·ªëi c√πng...');
    
    // Ki·ªÉm tra t·∫•t c·∫£ c√°c b·∫£ng quan tr·ªçng
    const counts = await Promise.all([
      prisma.user.count(),
      prisma.doctor.count(),
      prisma.patient.count(),
      prisma.appointment.count(),
      prisma.prescription.count(),
      prisma.medicine.count()
    ]);
    
    console.log('\nüìä T√≥m t·∫Øt c∆° s·ªü d·ªØ li·ªáu:');
    console.log(`Ng∆∞·ªùi d√πng: ${counts[0]}`);
    console.log(`B√°c sƒ©: ${counts[1]}`);
    console.log(`B·ªánh nh√¢n: ${counts[2]}`);
    console.log(`L·ªãch h·∫πn: ${counts[3]}`);
    console.log(`ƒê∆°n thu·ªëc: ${counts[4]}`);
    console.log(`Thu·ªëc: ${counts[5]}`);
    
    // Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu
    const usersWithoutRoleRecords = await prisma.user.findMany({
      where: {
        OR: [
          { role: 'DOCTOR', doctor: null },
          { role: 'PATIENT', patient: null }
        ]
      }
    });
    
    if (usersWithoutRoleRecords.length > 0) {
      console.log('\n‚ö†Ô∏è  V·∫•n ƒë·ªÅ v·ªÅ t√≠nh to√†n v·∫πn d·ªØ li·ªáu:');
      usersWithoutRoleRecords.forEach(user => {
        console.log(`- ${user.email} (${user.role}) thi·∫øu h·ªì s∆° vai tr√≤`);
      });
    } else {
      console.log('\n‚úÖ T√≠nh to√†n v·∫πn d·ªØ li·ªáu: OK');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// H√†m ch√≠nh ƒë·ªÉ ch·∫°y c√°c ki·ªÉm tra ƒë√£ ch·ªçn
async function main() {
  const command = process.argv[2];
  
  try {
    switch (command) {
      case 'check':
        await checkDatabase();
        break;
      case 'debug':
        await debugUsers();
        break;
      case 'final':
        await finalDatabaseCheck();
        break;
      case 'all':
        await checkDatabase();
        console.log('\n' + '='.repeat(50) + '\n');
        await debugUsers();
        console.log('\n' + '='.repeat(50) + '\n');
        await finalDatabaseCheck();
        break;
      default:
        console.log('C√°ch s·ª≠ d·ª•ng: node scripts/database-utils.js [check|debug|final|all]');
        console.log('  check - Ki·ªÉm tra c∆° s·ªü d·ªØ li·ªáu c∆° b·∫£n');
        console.log('  debug - Debug m·ªëi quan h·ªá ng∆∞·ªùi d√πng');
        console.log('  final - Ki·ªÉm tra cu·ªëi c√πng');
        console.log('  all   - Ch·∫°y t·∫•t c·∫£ ki·ªÉm tra');
        break;
    }
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

if (require.main === module) {
  main();
}

module.exports = {
  checkDatabase,
  debugUsers,
  finalDatabaseCheck
}; 