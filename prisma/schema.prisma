generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  password            String?
  name                String
  phone               String?
  role                UserRole            @default(PATIENT)
  isActive            Boolean             @default(true)
  isEmailVerified     Boolean             @default(false)
  isPhoneVerified     Boolean             @default(false)
  failedLoginAttempts Int                 @default(0)
  lastFailedLogin     DateTime?
  accountLocked       Boolean             @default(false)
  lockUntil           DateTime?
  twoFactorEnabled    Boolean             @default(false)
  twoFactorSecret     String?
  avatar              String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  doctorAppointments  Appointment[]       @relation("UserDoctorAppointments")
  appointments        Appointment[]       @relation("UserPatientAppointments")
  chats               Chat[]
  doctor              Doctor?
  doctorReviews       DoctorReview[]      @relation("UserReviews")
  healthGoals         HealthGoal[]
  healthMetrics       HealthMetric[]
  healthReports       HealthReport[]
  loginHistory        LoginHistory[]
  medicalRecords      MedicalRecord[]
  notifications       Notification[]
  patient             Patient?
  issuedPrescriptions Prescription[]      @relation("DoctorPrescriptions")
  prescriptions       Prescription[]      @relation("PatientPrescriptions")
  profile             Profile?
  sessions            Session[]
  permissions         UserPermission[]
  verificationTokens  VerificationToken[]
  reviewReports       ReviewReport[]      @relation("UserReports")
}

model Medicine {
  id                   String             @id @default(cuid())
  name                 String
  genericName          String?
  description          String?
  dosageForm           String
  strength             String
  manufacturer         String?
  prescriptionRequired Boolean            @default(true)
  sideEffects          String?
  warnings             String?
  interactions         String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  prescriptionItems    PrescriptionItem[]
}

model Prescription {
  id            String             @id @default(cuid())
  patientId     String
  doctorId      String
  appointmentId String?
  diagnosis     String
  notes         String?
  validUntil    DateTime?
  status        PrescriptionStatus @default(ACTIVE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  appointment   Appointment?       @relation(fields: [appointmentId], references: [id])
  doctor        User               @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  patient       User               @relation("PatientPrescriptions", fields: [patientId], references: [id])
  items         PrescriptionItem[]
}

model PrescriptionItem {
  id             String       @id @default(cuid())
  prescriptionId String
  medicineId     String
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  quantity       Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  medicine       Medicine     @relation(fields: [medicineId], references: [id])
  prescription   Prescription @relation(fields: [prescriptionId], references: [id])
}

model Appointment {
  id            String            @id @default(cuid())
  patientId     String
  doctorId      String
  date          DateTime
  status        AppointmentStatus @default(PENDING)
  type          AppointmentType   @default(IN_PERSON)
  symptoms      String?
  diagnosis     String?
  notes         String?
  followUpDate  DateTime?
  cancelReason  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  doctor        User              @relation("UserDoctorAppointments", fields: [doctorId], references: [id])
  patient       User              @relation("UserPatientAppointments", fields: [patientId], references: [id])
  prescriptions Prescription[]
  reviews       DoctorReview[]
}

model Doctor {
  id                 String             @id @default(cuid())
  userId             String             @unique
  specialization     String
  license            String
  licenseExpiry      DateTime
  verificationStatus VerificationStatus @default(PENDING)
  hospitalId         String?
  departmentId       String?
  experience         Int?
  bio                String?
  education          Json?
  certificates       Json?
  rating             Float?
  totalReviews       Int                @default(0)
  consultationFee    Decimal?
  isAvailable        Boolean            @default(true)
  imageUrl           String?
  galleryImages      String[]
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id])
  reviews            DoctorReview[]
}

model Patient {
  id           String    @id @default(cuid())
  userId       String    @unique
  dateOfBirth  DateTime?
  gender       String?
  bloodType    String?
  allergies    String?
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DoctorReview {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?
  isAnonymous Boolean  @default(false)
  isPinned    Boolean  @default(false)
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  doctorId    String
  appointmentId String?
  user        User     @relation("UserReviews", fields: [userId], references: [id], onDelete: Cascade)
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  appointment Appointment? @relation(fields: [appointmentId], references: [id])
  reports     ReviewReport[]

  @@unique([userId, doctorId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String?  @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userAgent    String?
  ipAddress    String?
  isValid      Boolean  @default(true)
  user         User     @relation(fields: [userId], references: [id])
}

model Profile {
  id             String    @id @default(cuid())
  userId         String    @unique
  dateOfBirth    DateTime?
  gender         Gender?
  address        String?
  medicalHistory String?
  allergies      String?
  bloodType      String?
  height         Float?
  weight         Float?
  avatar         String?
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id])
}

model LoginHistory {
  id           String      @id @default(cuid())
  userId       String
  ipAddress    String
  userAgent    String
  status       LoginStatus
  failedReason String?
  createdAt    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id])
}

model HealthMetric {
  id        String     @id @default(cuid())
  userId    String
  type      MetricType
  value     Float
  notes     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
}

model HealthGoal {
  id           String             @id @default(cuid())
  userId       String
  title        String
  description  String
  category     HealthGoalCategory
  target       String
  current      String
  unit         String
  startDate    DateTime
  deadline     DateTime
  progress     Int
  status       HealthGoalStatus   @default(ACTIVE)
  priority     HealthGoalPriority @default(MEDIUM)
  notes        String?
  milestones   Json?
  reminder     Boolean            @default(false)
  reminderTime String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         User               @relation(fields: [userId], references: [id])
}

model MedicalRecord {
  id        String     @id @default(cuid())
  patientId String
  type      RecordType
  content   String
  fileUrl   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  patient   User       @relation(fields: [patientId], references: [id])
}

model HealthReport {
  id              String       @id @default(cuid())
  userId          String
  period          ReportPeriod
  startDate       DateTime
  endDate         DateTime
  summary         String
  metrics         Json
  recommendations Json
  createdAt       DateTime     @default(now())
  user            User         @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  type      TokenType
  expiresAt DateTime
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model Chat {
  id          String        @id @default(cuid())
  userId      String
  aiDiagnosis Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  messages    ChatMessage[]
}

model ChatMessage {
  id        String      @id @default(cuid())
  chatId    String
  content   String
  role      MessageRole
  createdAt DateTime    @default(now())
  chat      Chat        @relation(fields: [chatId], references: [id])
}

model Permission {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  action          String           @unique
  resource        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
}

model ReviewReport {
  id          String           @id @default(cuid())
  reviewId    String
  reportedBy  String
  reason      String
  details     String?
  status      ReportStatus     @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  review      DoctorReview     @relation(fields: [reviewId], references: [id])
  reporter    User             @relation("UserReports", fields: [reportedBy], references: [id])
}

enum UserRole {
  PATIENT
  DOCTOR
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  MISSED
}

enum RecordType {
  LAB_RESULT
  IMAGING
  PRESCRIPTION
  VITAL_SIGNS
  OTHER
}

enum MetricType {
  BLOOD_PRESSURE
  HEART_RATE
  BLOOD_SUGAR
  TEMPERATURE
  WEIGHT
  HEIGHT
  CHOLESTEROL
  OTHER
}

enum MessageRole {
  USER
  ASSISTANT
}

enum NotificationType {
  APPOINTMENT_REMINDER
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_CANCELLATION
  PRESCRIPTION_REMINDER
  HEALTH_REPORT
  GENERAL
}

enum ReportPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum LoginStatus {
  SUCCESS
  FAILED
  LOCKED
  INVALID_CREDENTIALS
  ACCOUNT_DISABLED
}

enum TokenType {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum AppointmentType {
  IN_PERSON
  VIRTUAL
  HOME_VISIT
}

enum HealthGoalCategory {
  WEIGHT
  EXERCISE
  NUTRITION
  SLEEP
  MEDICATION
  MENTAL_HEALTH
  GENERAL
}

enum HealthGoalStatus {
  ACTIVE
  COMPLETED
  OVERDUE
  PAUSED
}

enum HealthGoalPriority {
  LOW
  MEDIUM
  HIGH
}

enum ReportStatus {
  PENDING
  REVIEWED
  REJECTED
  ACCEPTED
}
